%h2 Class02 Answer:
%h2 What is Git and why use it?

%p Answering Why Git is easier than answering What is Git or how to operate Git.

%ul
  %li Q: Why use Git?
  %li It helps me collaborate with other developers.
  %li It backs up my work.
  %li It helps me track and fix bugs.
  %li It helps me copy software between hosts.

%ul
  %li Q: What is Git?
  %li Git is a time-travel machine.
  %li As I travel forward in time, I leave messages behind.
  %li Then a year from now I look at those messages.
  %li If I see a message I like, I travel back in time to see the world when that message was created.

%p The way to learn Git is to think of it as a system of nouns and verbs.

%p I list the verbs first:

%ul
  %li Config
  %li Initialize
  %li Clone
  %li Fork
  %li Branch
  %li Commit
  %li Fetch
  %li Merge
  %li Pull
  %li Push
  %li Log
  %li Grep

%p The nouns of Git are listed below:

%ul
  %li Repository (AKA Repo)
  %li
    %a(href='http://www.google.com/search?q=In+Git+wht+is+Remote+Repository' target='x')
      Remote Repository
  %li Branch
  %li Commit
  %li Clone
  %li Fork
  %li
    %a(href='http://www.google.com/search?q=In+Git+wht+is+Working+Directory' target='x')
      Working Directory
  %li 
    %a(href='http://www.google.com/search?q=In+Git+wht+is+Pull+Request' target='x')
      Pull Request
  %li 
    %a(href='http://www.google.com/search?q=In+Git+wht+is+Git+Server' target='x')
      Git Server


%p Next, I combine the verbs with nouns and provide descriptions.

%p These combinations of verbs, nouns, and descriptions might be a good way to learn Git.

%ul
  %li
    Config Git
    %br/
    I Config Git with the git config command:
    .syntax
      %pre
        %code.bash
          git config --global user.name "Developer Dan"
          git config --global user.email bikle101@gmail.com
    Git wants to be configured. The above commands add syntax to ~/.gitconfig

  %li
    Initialize Repo
    %br/
    I easily Initialize Repo with the git init command:
    .syntax
      %pre
        %code.bash
          mkdir ~/danapp1
          cd    ~/danapp1
          git init

  %li
    Clone Repo
    %br/
    I Clone a Repo to get a clone (copy) of a Repo:
    .syntax
      %pre
        %code.bash
          cd ~
          git clone https://github.com/tensorflow/tensorflow
    The above command gives me folder named tensorflow full of tensorflow software.

  %li
    Fork Repo
    %br/
    When I Clone a Repo to my laptop I get a Clone.
    %br/
    When I Clone a Repo to a server (like github.com) I get a Fork.
    %br/
    To Fork tensorflow-Repo I login to github.com
    %br/
    Then I load this URL:
    %br/

    %a(href='https://github.com/tensorflow/tensorflow' target='x')
      https://github.com/tensorflow/tensorflow
    %br/
    Next, I click the Fork-button in upper right.
    %br/
    If I want to add code to a Repo, I fork it; otherwise I just clone it.

  %li
    Branch Repo
    %br/
    I Branch a Repo to get a Branch of a Repo:
    .syntax
      %pre
        %code.bash
          cd ~
          git clone https://github.com/tensorflow/tensorflow
          cd tensorflow
          git checkout -b danbranch1
          mkdir tensorflow/examples/tutorials/bikle
          echo This folder should create demos by Dan > tensorflow/examples/tutorials/bikle/readme.txt
    Above, I create a Branch called danbranch1.
    %br/
    The code in danbranch1 is separate from the code in the Branch called master.

  %li
    Commit Repo
    %br/
    Commit is like the save button in an editor.
    .syntax
      %pre
        %code.bash
          mkdir ~/danapp2
          cd    ~/danapp2
          echo danapp2 should be an enhancement of danapp1. > readme.txt
          git init
          git add .
          git commit -am 'danapp2 has enhanced danapp1'
    When I Commit, I should give a reason for the commit.


  %li
    Fetch Repo
    %br/
    I Fetch a Repo to access Commits in that Repo:
    .syntax
      %pre
        %code.bash
          mkdir ~/danapp10
          cd    ~/danapp10
          echo danapp10 should be an enhancement of danapp2. > readme.txt
          git init
          git add .
          git commit -am 'danapp10 has enhanced danapp2'
          cd ~
          git clone danapp10 danapp11
          cd ~/danapp10
          echo danapp11 is a clone of danapp10 >> readme.txt
          git commit -am Another_Enhancement
          cd ~/danapp11
          git fetch
    git fetch tells danapp11 about Another_Enhancement Commit in danapp10.
    %br/
    That Commit, however, has not been Merged into danapp11 yet.
    %br/
    That Merge can happen next if I want.

  %li
    Merge Repo (Fetch)
    %br/
    After a Fetch, I Merge a Repo to merge a commit from another Repo:
    .syntax
      %pre
        %code.bash
          cd ~/danapp11
          git merge
    That Merge makes danapp11 identical to danapp10

  %li
    Merge Repo (Branch)
    %br/
    Another type of Merge is to Merge a Branch:
    .syntax
      %pre
        %code.bash
          cd ~/danapp10
          git checkout -b danbranch1
          echo Use danapp10 to test Branches >> readme.txt
          git commit -am 'I like this commit.'
          git checkout master
          git merge danbranch1
    That Merge makes master identical to danbranch1.

  %li
    Pull Repo
    %br/
    I Pull a Repo if I want to Fetch and Merge:
    .syntax
      %pre
        %code.bash
          git clone ~/danapp10 ~/danapp12
          cd ~/danapp10
          echo danapp10 more interesting. >> readme.txt
          git commit -am 'I like this commit 2.'
          cd ~/danapp12
          git pull
    That Pull makes danapp12 identical to danapp10.

  %li
    Push Repo
    %br/
    I Push a Repo to copy Commits to a server:
    .syntax
      %pre
        %code.bash
          cd /tmp/
          git clone git@github.com:danbikle/ml4us.git
          cd ml4us
          echo Hello >> README.md
          git commit -am 'Dan was here.'
          git push
    That Push copies a Commit to the server.
    %br/
    If I want to copy a Commit between two Repos on the same host, I should use Pull not Push.
    %br/
    If I want to copy a Commit between two Repos on the different hosts, over ssh, I should use Pull not Push.


  %li
    Log
    %br/
    I use Log to list recent Commits:
    .syntax
      %pre
        %code.bash
          cd /tmp/
          git clone https://github.com/tensorflow/tensorflow
          cd tensorflow
          git log -9
  %li
    Grep Repo
    %br/
    I Grep Repo to search for text:
    .syntax
      %pre
        %code.bash
          cd /tmp/
          git clone https://github.com/scikit-learn/scikit-learn
          cd scikit-learn
          git grep rbm.learning_rate
    git grep is useful.

%p
  %a(href='class02g10') Top
          
%p
  %a(href='class02') Class02
