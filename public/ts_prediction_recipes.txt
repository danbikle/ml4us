ts_prediction_recipes.txt

The first time series prediction recipe I describe is called: "Price versus Date Regression".

Main idea:
  - Fit a straight line through a time-series of prices.
  - Use the line to predict future prices from future dates.

Ingredients:
  - A list of dates and prices (Default: S&P500, Yahoo might work)
  - A start-date and end-date            (From end-user)
  - A prediction-date after the end-date (From end-user)
  
Expected Result:
  - One prediction of a price at prediction-date

Steps:
  - Get sorted list of dates and prices into prices1_df  (Yahoo might work)
  - Get start_date, end_date, and prediction_date (From end-user)
  - Get list of dates and prices into prices2_df between start_date and end_date 
  - Create list of integers from prices2_df-dates:
    - 0 (or 1) might correspond to earliest date
  - Declare that the list of integers to be "X"
  - Declare that the corresponding prices by "y"
  - Create a Linear Regression model from a suitable API:
    - my favorite: Python sklearn.linear_model.LinearRegression
    - R has glm()
  - Use model to "fit" straight line to X and y data
  - Calculate integer which corresponds to prediction_date:
    Integer is number of days prediction_date is after start_date
  - Use the straight line to predict price from prediction_date-integer


The next prediction recipe I describe is called: "Pct-Lead versus Pct-Lag Regression"

Main idea:
  - Build a scatter-plot of Pct-Lead versus Pct-Lag observations
  - Fit a straight line through the scatter-plot
  - Use the line to predict Pct-Lead from Pct-Lag
  - Collect many predictions for many previous years
  - Report on accuracy and effectiveness of the many predictions
  - Decide if I should trust Pct-Lead-prediction for today
  - If yes, predict Pct-Lead from Pct-Lag; then act on prediction

Ingredients:
  - A list of dates and prices (Default: S&P500, Yahoo might work)
  - A list of years to test (Default: [2010,2011,2012,2013,2014,2015,2016,2017]) 
  - Integer number of years to learn from for each test-year (Default: 25)

Steps:
  - Get sorted list of dates and prices into prices1_df
  - Get list of years to test 
  - Get Integer number of years to learn from for each test-year:
    - call it: train_i
  - Generate pctlead from each price:
    pctlead = 100*(next_price - price)/price
  - Generate pctlag1 from each price:
    pctlag1 is pctlead, shifted forward in time once:
      Yesterday's pctlead is today's pctlag1
    alternative expression:
      pctlag1 = 100*(price - previous_price)/previous_price
  - Create feat_df from prices1_df, pctlead, pctlag1
  For a test_yr, Steps:
    - copy test_yr-observations (about 252) from feat_df into test_yr_df
    - Declare x_test to be test_yr_df.pctlag1
    - copy train_i-years of observations before test_yr from feat_df into train_df
    - Declare x_train to be train_df.pctlag1
    - Declare y_train to be train_df.pctlead
    - Create a Linear Regression model
    - Use model to "fit" straight line to x_train and y_train
    - Use the straight line to predict pctlead for each x_test
    - Copy test_yr_df and predicted pctlead into predictions_df
  Reporting:
    - Use predictions_df.prediction and predictions_df.pctlead to calculate:
      - Accuracy (How often the sign of the prediction is True)
      - Effectiveness:
        - Average gain of "up"   predictions
        - Average gain of "down" predictions
      - Compare Accuracy and Effectiveness to Accuracy and Effectiveness of "Long-Only" model

    
